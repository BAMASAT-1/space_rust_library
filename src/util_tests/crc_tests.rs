//*****************************************************************************
// (C) 2018, Stefan Korner, Austria                                           *
//                                                                            *
// The Space Rust Library is free software; you can redistribute it and/or    *
// modify it under the terms of the MIT License as published by the           *
// Massachusetts Institute of Technology.                                     *
//                                                                            *
// The Space Rust Library is distributed in the hope that it will be useful,  *
// but WITHOUT ANY WARRANTY; without even the implied warranty of             *
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the MIT License   *
// for more details.                                                          *
//*****************************************************************************
// Utilities - Cyclic Redundancy Check (CRC) - Unit tests                     *
//*****************************************************************************
use test_helpers::assert;
use util::crc;

///////////////
// constants //
///////////////

// test patterns for CRC 8
const SPW_RMAP_HEADER1: [u8; 15] = [
    0xfe, 0x01, 0x6c, 0x00, 0x67, 0x00, 0x00, 0x00,
    0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
];
const SPW_RMAP_HEADER1_CRC: u8 = 0x9f;

const SPW_RMAP_DATA1: [u8; 16] = [
    0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
];
const SPW_RMAP_DATA1_CRC: u8 = 0x56;

const SPW_RMAP_HEADER2: [u8; 7] = [
    0x67, 0x01, 0x2c, 0x00, 0xfe, 0x00, 0x00
];
const SPW_RMAP_HEADER2_CRC: u8 = 0xed;

// test patterns for CRC 16
const TC_PACKET_01: [u8; 276] = [
    0x1a, 0x8c, 0xc0, 0x0e, 0x01, 0x0d, 0x19, 0x06,
    0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x02, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x04, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x05, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x06, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x08, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x09, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0a, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0b, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0c, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0d, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0e, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x10, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x11, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x12, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x13, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x14, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x15, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x16, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x17, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x18, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x19, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1a, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1b, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1c, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1d, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1e, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xac, 0x8f
];

const TC_FRAME_01: [u8; 256] = [
    0x22, 0xf6, 0x00, 0xff, 0x00, 0x42, 0x1a, 0x8c,
    0xc0, 0x0e, 0x01, 0x0d, 0x19, 0x06, 0x02, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x02, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x04, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x05, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x08, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x09, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0a, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0b, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0d, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0e, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x10, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x11, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x12, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x13, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x14, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x15, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x16, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x17, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x19, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x1a, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x1b, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x1c, 0xff, 0x00, 0x00, 0x00, 0xad, 0x1a
];

const TC_FRAME_02: [u8; 36] = [
    0x22, 0xf6, 0x00, 0x23, 0x00, 0x82, 0x00, 0x0f,
    0x00, 0x1d, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x1e, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0xac, 0x8f, 0x00, 0x68
];

///////////////
// functions //
///////////////

fn test_crc8_operation() {
    let pkt = SPW_RMAP_HEADER1;
    let pkt_size = pkt.len();
    let crc = crc::calculate8(&pkt, pkt_size);
    let expected_crc = SPW_RMAP_HEADER1_CRC;
    assert::dump_u8("crc", crc, expected_crc);
    let pkt = SPW_RMAP_DATA1;
    let pkt_size = pkt.len();
    let crc = crc::calculate8(&pkt, pkt_size);
    let expected_crc = SPW_RMAP_DATA1_CRC;
    assert::dump_u8("crc", crc, expected_crc);
    let pkt = SPW_RMAP_HEADER2;
    let pkt_size = pkt.len();
    let crc = crc::calculate8(&pkt, pkt_size);
    let expected_crc = SPW_RMAP_HEADER2_CRC;
    assert::dump_u8("crc", crc, expected_crc);
}

fn test_crc16_operation() {
    let pkt = TC_PACKET_01;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
    let pkt = TC_FRAME_01;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
    let pkt = TC_FRAME_02;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
}

pub fn test() {
    test_crc8_operation();
    test_crc16_operation();
}
