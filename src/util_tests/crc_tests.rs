//*****************************************************************************
// (C) 2018, Stefan Korner, Austria                                           *
//                                                                            *
// The Space Rust Library is free software; you can redistribute it and/or    *
// modify it under the terms of the MIT License as published by the           *
// Massachusetts Institute of Technology.                                     *
//                                                                            *
// The Space Rust Library is distributed in the hope that it will be useful,  *
// but WITHOUT ANY WARRANTY; without even the implied warranty of             *
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the MIT License   *
// for more details.                                                          *
//*****************************************************************************
// Utilities - Cyclic Redundancy Check (CRC) - Unit tests                     *
//*****************************************************************************
use test_helpers::assert;
use util::crc;

///////////////
// constants //
///////////////

// test patterns for CRC 16
const TC_PACKET_01: [u8; 276] = [
    0x1A, 0x8C, 0xC0, 0x0E, 0x01, 0x0D, 0x19, 0x06,
    0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x02, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x04, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x05, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x06, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x08, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x09, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0A, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0B, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0C, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0D, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0E, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x10, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x11, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x12, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x13, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x14, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x15, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x16, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x17, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x18, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x19, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1A, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1B, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1C, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1D, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1E, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0xAC, 0x8F
];

const TC_FRAME_01: [u8; 256] = [
    0x22, 0xF6, 0x00, 0xFF, 0x00, 0x42, 0x1A, 0x8C,
    0xC0, 0x0E, 0x01, 0x0D, 0x19, 0x06, 0x02, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x05, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x06, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x08, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x09, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0A, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0C, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x11, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x12, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x13, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x14, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x15, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x16, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x17, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x19, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x1A, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x1B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x1C, 0xFF, 0x00, 0x00, 0x00, 0xAD, 0x1A
];

const TC_FRAME_02: [u8; 36] = [
    0x22, 0xF6, 0x00, 0x23, 0x00, 0x82, 0x00, 0x0F,
    0x00, 0x1D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x1E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
    0xAC, 0x8F, 0x00, 0x68
];

fn test_crc16_operation() {
    let pkt = TC_PACKET_01;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
    let pkt = TC_FRAME_01;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
    let pkt = TC_FRAME_02;
    let pkt_size = pkt.len();
    let crc = crc::calculate16(&pkt, pkt_size - 2);
    let expected_crc = (0x100_u16 * (pkt[pkt_size - 2] as u16)) + (pkt[pkt_size - 1] as u16);
    assert::dump_u16("crc", crc, expected_crc);
}

pub fn test() {
    test_crc16_operation()
}
